
import pytest
import logging
from selenium import webdriver
import argparse
import os
from selenium.webdriver import DesiredCapabilities
from selenium.webdriver.chrome.options import Options as chrome_options
from selenium.webdriver.firefox.options import Options as firefox_options
from selenium.webdriver.ie.options import Options as ie_options
from selenium.webdriver.edge.options import Options as edge_options
from selenium.webdriver.opera.options import Options as opera_options
import allure


'''    FIREFOX = {
        "browserName": "firefox",
        "marionette": True,
        "acceptInsecureCerts": True,
    }

    INTERNETEXPLORER = {
        "browserName": "internet explorer",
        "version": "",
        "platform": "WINDOWS",
    }

    EDGE = {
        "browserName": "MicrosoftEdge",
        "version": "",
        "platform": "WINDOWS"
    }

    CHROME = {
        "browserName": "chrome",
        "version": "",
        "platform": "ANY",
    }

    OPERA = {
        "browserName": "opera",
        "version": "",
        "platform": "ANY",
    }

    SAFARI = {
        "browserName": "safari",
        "version": "",
        "platform": "MAC",
    }

    HTMLUNIT = {
        "browserName": "htmlunit",
        "version": "",
        "platform": "ANY",
    }

    HTMLUNITWITHJS = {
        "browserName": "htmlunit",
        "version": "firefox",
        "platform": "ANY",
        "javascriptEnabled": True,
    }

    IPHONE = {
        "browserName": "iPhone",
        "version": "",
        "platform": "MAC",
    }

    IPAD = {
        "browserName": "iPad",
        "version": "",
        "platform": "MAC",
    }

    ANDROID = {
        "browserName": "android",
        "version": "",
        "platform": "ANDROID",
    }

    PHANTOMJS = {
        "browserName": "phantomjs",
        "version": "",
        "platform": "ANY",
        "javascriptEnabled": True,
    }

    WEBKITGTK = {
        "browserName": "MiniBrowser",
        "version": "",
        "platform": "ANY",
    }
'''

LOGGER = logging.getLogger(__name__)
# 当前插件支持的 浏览器类型/ 驱动类型
SUPPORTED_DRIVERS = {
    "CHROME": webdriver.Chrome,
    "EDGE": webdriver.Edge,
    "FIREFOX": webdriver.Firefox,
    "IE": webdriver.Ie,
    "SAFARI": webdriver.Safari,
    "OPERA": webdriver.Opera,
    "PHANTOMJS": webdriver.PhantomJS,
    "REMOTE": webdriver.Remote,
    # "Android": webdriver.Android,
    # "BrowserStack": webdriver.Remote,
    # "CrossBrowserTesting": webdriver.Remote,
    # "Remote": webdriver.Remote,
    # "SauceLabs": webdriver.Remote,
    # "TestingBot": webdriver.Remote,
}

SUPPORTED_REMOTE_DRIVERS = {
    "CHROME": webdriver.Chrome,
    "EDGE": webdriver.Edge,
    "FIREFOX": webdriver.Firefox,
    "IE": webdriver.Ie,
    # "SAFARI": webdriver.Safari,
    "OPERA": webdriver.Opera,
    # "PHANTOMJS": webdriver.PhantomJS,
}


def pytest_addoption(parser):
    """
    pytest 增加启动选项
    pytest 钩子方法 --> pytest初始化的时候会自动调用这个方法
    """
    # addini 配置文件里面的选项
    _capture_choices = ("never", "failure", "always")
    parser.addini(
        "selenium_capture_debug",
        help="when debug is captured {0}".format(_capture_choices),
        default=os.getenv("SELENIUM_CAPTURE_DEBUG", "failure"),
    )
    parser.addini(
        "selenium_exclude_debug",
        help="debug to exclude from capture",
        default=os.getenv("SELENIUM_EXCLUDE_DEBUG"),
    )

    _auth_choices = ("none", "token", "hour", "day")
    parser.addini(
        "saucelabs_job_auth",
        help="Authorization options for the Sauce Labs job: {0}".format(_auth_choices),
        default=os.getenv("SAUCELABS_JOB_AUTH", "none"),
    )

    _data_center_choices = ("us-west-1", "us-east-1", "eu-central-1")
    parser.addini(
        "saucelabs_data_center",
        help="Data center options for Sauce Labs connections: {0}".format(
            _data_center_choices
        ),
        default="us-west-1",
    )

    parser.addini(
        "max_driver_init_attempts",
        help="Maximum number of driver initialization attempts",
        default=3,
    )
    group = parser.getgroup("selenium", "selenium")
    # 添加启动 命令行参数
    group._addoption(
        "--driver",
        choices=SUPPORTED_DRIVERS,
        help="webdriver implementation.",
        metavar="str",
    )
    group._addoption(
        "--driver-path",
        metavar="store",
        help="path to the driver executable."
    )
    group._addoption(
        "--capability",
        metavar="str",
        choices=SUPPORTED_REMOTE_DRIVERS,
        help="additional capabilities.",
    )
    group._addoption(
        "--event-listener",
        metavar="str",
        help="selenium eventlistener class, e.g. "
        "package.module.EventListenerClassName.",
    )
    group._addoption(
        "--host",
        metavar="str",
        help="DEPRECATED host that the selenium server is listening on, "
        "which will default to the cloud provider default "
        "or localhost.",
    )
    group._addoption(
        "--port",
        type=int,
        metavar="num",
        help="DEPRECATED port that the selenium server is listening on, "
        "which will default to the cloud provider default "
        "or localhost.",
    )
    group._addoption(
        "--report-path",
        metavar="store",
        help="path to the report executable."
    )
    # group._addoption(
    #     "--selenium-host",
    #     metavar="str",
    #     help="host that the selenium server is listening on, "
    #     "which will default to the cloud provider default "
    #     "or localhost.",
    # )
    # group._addoption(
    #     "--selenium-port",
    #     type=int,
    #     metavar="num",
    #     help="port that the selenium server is listening on, "
    #     "which will default to the cloud provider default "
    #     "or localhost.",
    # )


# class DriverAction(argparse.Action):
#     def __call__(self, parser, namespace, values, option_string=None):
#         setattr(namespace, self.dest, values)
#         driver = getattr(drivers, values.lower())
#         # set the default host and port if specified in the driver module
#         namespace.selenium_host = namespace.selenium_host or getattr(
#             driver, "HOST", None
#         )
#         namespace.selenium_port = namespace.selenium_port or getattr(
#             driver, "PORT", None
#         )


@pytest.fixture(scope="session")
def driver_class(pytestconfig):
    """Returns combined capabilities from pytest-variables and command line"""
    driver_argv = pytestconfig.getoption("driver").upper()
    if driver_argv is None:
        raise pytest.UsageError("--driver must be specified")

    if driver_argv == "REMOTE":
        capability_argv = pytestconfig.getoption("capability").upper()
        if capability_argv == "CHROME":
            # capabilities = DesiredCapabilities.CHROME.copy()
            options = chrome_options()
        elif capability_argv == "FIREFOX":
            # capabilities = DesiredCapabilities.FIREFOX.copy()
            options = firefox_options()
        elif capability_argv == "EDGE":
            # capabilities = DesiredCapabilities.FIREFOX.copy()
            options = edge_options()
        elif capability_argv == "IE":
            # capabilities = DesiredCapabilities.FIREFOX.copy()
            options = ie_options()
        elif capability_argv == "OPERA":
            # capabilities = DesiredCapabilities.FIREFOX.copy()
            options = opera_options()
        else:   # 其他默认为chrome
            # capabilities = DesiredCapabilities.CHROME.copy()
            options = chrome_options()

        # options.add_argument('--no-sandbox')
        # options.add_argument('--user-data-dir')
        # options.add_argument('--dns-prefetch-disable')
        # options.add_argument('--lang=en-US')
        # options.add_argument('--disable-setuid-sandbox')
        # options.add_argument('--disable-gpu')
        # options.add_argument('--hide-scrollbars')
        options.add_argument("--headless")
        host = pytestconfig.getoption("host")
        port = pytestconfig.getoption("port")
        remote_address = "http://"+host+":"+str(port)+"/wd/hub"
        print('grid_url=', remote_address)

        driver = webdriver.Remote(
            command_executor=remote_address,
            desired_capabilities=options.to_capabilities()
        )
    else:
        driver = SUPPORTED_DRIVERS[driver_argv]()
    return driver


@pytest.fixture(scope='session')
def init_webdriver(driver_class):
    global DRIVER
    """
    返回一个 web驱动
    """
    """Returns a WebDriver instance based on options and capabilities"""
    with allure.step("初始化selenium-webdriver..."):
        driver = driver_class
        DRIVER = driver
        yield driver
    with allure.step("停止，并退出selenium-webdriver..."):
        driver.quit()
    return None


# 测试失败进行截图
@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()
    # rep.when 可选参数有call、setup、teardown
    # call表示用例执行环节; setup、teardown表示环境初始化和清理环节
    # 这里只针对call环节且失败的用例进行异常截图
    if rep.when == 'call' and rep.failed:
        # 检查driver对象是否包含get_screenshot_as_png的方法
        if hasattr(DRIVER, 'get_screenshot_as_png'):
            allure.attach(DRIVER.get_screenshot_as_png(), '断言失败截图', allure.attachment_type.PNG)
