
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.select import Select
from selenium.webdriver.support import ui
from selenium.webdriver.support.wait import WebDriverWait
import time
from seleniumrunner.pytest_utils import Assert_class
# import uiautomation as auto
# from selenium.webdriver.common.keys import Keys


class SeleniumCommand:
    # STYLE = "background: green; border: 2px solid red;"  # 高亮的样式
    STYLE = "border: 2px solid red;"  # 高亮的样式

    # 框选操作的元素
    def highlight_element(self, el):
        self.driver.execute_script("arguments[0].setAttribute('style', arguments[1]);", el, self.STYLE)

    def __init__(self, driver, context):
        self.driver = driver
        self.context = context
        self.assert_obj = Assert_class.Assert_Result(self.driver)
        self.wait = WebDriverWait(self.driver, 30)    # 显示等待10秒

    # ============== 断言操作
    def assert_variable(self, desc, target, value):
        """
        检查变量是否为预期值。变量的值将被转换为字符串进行比较。如果断言失败，测试将停止。
        """
        print('assert_variable:{}={}'.format(target, self.context.get(target, None)))
        self.assert_obj.assert_true(self.context.get(target, None) == value, desc)

    def assert_title_is(self, desc, target, value):
        """
        断言标题是否为预期值
        """
        self.assert_obj.assert_true(
            EC.title_is(value)(self.driver), desc)

    def assert_title_contains(self, desc, target, value):
        """
        断言标题是否包含预期值
        """
        self.assert_obj.assert_true(
            EC.title_contains(value)(self.driver), desc)

    def assert_url_contains(self, desc, target, value):
        """
        断言URL是否包含预期值
        """
        self.assert_obj.assert_true(
            EC.url_contains(value)(self.driver), desc)

    def assert_url_matches(self, desc, target, value):
        """
        断言标题是否匹配预期值
        """
        self.assert_obj.assert_true(
            EC.url_matches(value)(self.driver), desc)

    def assert_url_to_be(self, desc, target, value):
        """
        检查重定向的URL
        """
        self.assert_obj.assert_true(
            EC.url_to_be(value)(self.driver), desc)

    def assert_url_changes(self, desc, target, value):
        """
        检查URL是否改变
        """
        self.assert_obj.assert_true(
            EC.url_changes(value)(self.driver), desc)

    def assert_presence_of_element_located(self, desc, target, value):
        """
        断言特定元素是否存在于页面DOM树中，如果是，返回该元素（单个元素），否则报错
        """
        # self.assert_obj.assert_true(
        #     EC.presence_of_element_located((By.XPATH, target))(self.driver), desc)
        self.assert_obj.assert_true(
            self.wait.until(EC.presence_of_element_located((By.XPATH, target))), desc)

    def assert_presence_of_all_elements_located(self, desc, target, value):
        """
        定位的元素范围内，是否至少有一个元素存在于页面当中，如果是，返回满足条件的所有元素组成的List，否则返回空List
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.presence_of_all_elements_located((By.XPATH, target))), desc)

    def assert_visibility_of_element_located(self, desc, target, value):
        """
        断言特定元素是否存在于DOM树中并可见，如果是返回该元素（单个元素），否则报错
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.visibility_of_element_located((By.XPATH, target))), desc)

    def assert_invisibility_of_element_located(self, desc, target, value):
        """
        断言特定元素是否不可访问或不存在于DOM树中，如果是返回True，反之则返回False
        :param desc:
        :param target: 传递定位范围locator
        :param value:
        :return:
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.invisibility_of_element_located((By.XPATH, target))), desc)

    def assert_invisibility_of_element(self, desc, target, value):
        """
        断言特定元素是否不可访问或不存在于DOM树中，如果是返回True，反之则返回False
        :param desc:
        :param target: 传递定位范围(仅text文本)，也可以传递是元素：element
        :param value:
        :return:
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.invisibility_of_element(self.driver.find_element(By.XPATH, target))), desc)

    def assert_visibility_of(self, desc, target, value):
        """
        判断某个元素是否DOM树中上可见
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.visibility_of(self.driver.find_element(By.XPATH, target))), desc)

    def assert_visibility_of_any_elements_located(self, desc, target, value):
        """
        定位的元素范围内，是否至少有一个元素存在于DOM树当中并可见，如果是，返回满足条件的所有元素组成的List，否则返回空List
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.visibility_of_any_elements_located((By.XPATH, target))), desc)

    def assert_visibility_of_all_elements_located(self, desc, target, value):
        """
        定位的元素范围内，是否至少有一个元素存在于DOM树当中并可见，如果是，返回满足条件的所有元素组成的List，否则返回空False
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.visibility_of_all_elements_located((By.XPATH, target))), desc)

    def assert_element_to_be_clickable(self, desc, target, value):
        """
        断言特定元素是否可点击，如果可以则返回该元素，否则返回False
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.element_to_be_clickable((By.XPATH, target))), desc)

    def assert_staleness_of(self, desc, target, value):
        """
        断言特定元素是否不在附加于于DOM树中，如果不再附加返回True，反之则返回False
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.staleness_of(self.driver.find_element(By.XPATH, target))), desc)

    def assert_text_to_be_present_in_element(self, desc, target, value):
        """
        断言特定文本是否出现在特定元素中，如果是返回True，反之则返回False
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.text_to_be_present_in_element((By.XPATH, target), value)), desc)

    def assert_text_to_be_present_in_element_value(self, desc, target, value):
        """
        断言特定文本是否出现在特定元素的value值中，如果是返回True，反之则返回False
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.text_to_be_present_in_element_value((By.XPATH, target), value)), desc)

    def assert_frame_to_be_available_and_switch_to_it(self, desc, target, value):
        """
        断言frame窗口是否可被切换，如果是返回True，反之则返回False
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.frame_to_be_available_and_switch_to_it((By.XPATH, target))), desc)

    def assert_element_to_be_selected(self, desc, target, value):
        """
        断言特定元素是否被选中，如果是返回True，反之则返回False
        :param desc:
        :param target: 传递是元素：element
        :param value:
        :return:
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.element_to_be_selected(self.driver.find_element(By.XPATH, target))), desc)

    def assert_element_located_to_be_selected(self, desc, target, value):
        """
        断言特定元素是否被选中，如果是返回True，反之则返回False
        :param desc:
        :param target: 传递是元素：locator
        :param value:
        :return:
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.element_located_to_be_selected((By.XPATH, target))), desc)

    def assert_element_located_selection_state_to_be(self, desc, target, value):
        """
        断言特定元素的选中状态是否与预期相同，相同则返回True，反之则返回False
        """
        self.assert_obj.assert_true(
            self.wait.until(EC.element_located_selection_state_to_be((By.XPATH, target))), desc)

    def assert_number_of_windows_to_be(self, desc, target, value):
        """
        断言特定窗口数和实际窗口数是否一致，如果是则返回True，反之则返回False
        """
        self.assert_obj.assert_true(
            EC.number_of_windows_to_be(value)(self.driver), desc)

    def assert_alert_is_present(self, desc, target, value):
        """
        断言弹出框是否存在，如果是切换到alert，否则返回False
        """
        self.assert_obj.assert_true(
            EC.alert_is_present()(self.driver), desc)

    def assert_text_of_alert(self, desc, target, value):
        """
        断言弹出框文本是否为预期值，如果要返回True，反之返回False
        """
        self.assert_obj.assert_true(
            self.driver.switch_to.alert.text == value, desc)

    def click(self, desc, target, value):
        """
        单击目标元素
        :param desc:
        :param target:
        :param value: 用于特定的延时处理
        :return:
        """
        el = self.driver.find_element(By.XPATH, target)
        self.highlight_element(el)
        el.click()
        if (not(value is None or value == '')) and (str(value).isdecimal() or self.isFloat(value)):
            time.sleep(float(value))
        else:
            print('延时参数错误！')

    # 验证输入值是否为浮点数
    def isFloat(self, value):
        try:
            float(value)
        except:
            isFloat = False
        else:
            isFloat = True
        return isFloat

    def clear(self, desc, target, value):
        """
        清除文本框中的内容
        :param desc:
        :param target:
        :param value:
        :return:
        """
        self.driver.find_element(By.XPATH, target).clear()

    def close(self, desc, target, value):
        """
        关闭当前窗口
        """
        self.driver.close()

    def double_click(self, desc, target, value):
        """
        双击元素（例如，链接、按钮、复选框或单选按钮）。
        """
        ActionChains(self.driver).double_click(self.driver.find_element(By.XPATH, target)).perform()

    def drag_and_drop_to_object(self, desc, target, value):
        """
        拖动一个元素并将其放在另一个元素上。
        """
        ActionChains(self.driver).drag_and_drop(self.driver.find_element(By.XPATH, target),
                                                self.driver.find_element(By.XPATH, value)).perform()

    def execute_script(self, desc, target, value):
        """
        在当前选定的框架或窗口的上下文中执行一段 JavaScript
        """
        self.driver.execute_script(target, value)

    def execute_async_script(self, desc, target, value):
        """
        在当前选定的框架或窗口的上下文中执行 JavaScript 的异步片段。
        """
        self.driver.execute_async_script(target, value)

    def mouse_over(self, desc, target, value):
        """
        模拟用户将鼠标悬停在指定元素上。
        """
        ActionChains(self.driver).move_to_element(self.driver.find_element(By.XPATH, target)).perform()

    def mouse_click_hold(self, desc, target, value):
        """
        模拟用户将鼠标按下保持在指定元素上。
        """
        ActionChains(self.driver).click_and_hold(self.driver.find_element(By.XPATH, target)).perform()

    def open(self, desc, target, value):
        """
        在继续之前打开一个 URL 并等待页面加载。这接受相对和绝对 URL。
        """
        self.driver.get(target)
        self.driver.maximize_window()
        # 存在问题：有时这个测试网页没有显示有置顶，会导致测试失败的概率很高
        # 为了解决这个问题：需要在打开浏览器成功后，将其置顶
        # import pyoutgui

    def pause(self, desc, target, value):
        """
        等待指定的时间。
        """
        if (not(value is None or value == '')) and (str(value).isdecimal() or self.isFloat(value)):
            time.sleep(float(value))
        else:
            print('延时参数错误！')

    def select(self, desc, target, value):
        """
        使用选项定位器从下拉菜单中选择一个元素
        """
        Select(self.driver.find_element(By.XPATH, target)).select_by_value(value)

    def select_frame(self, desc, target, value):
        """
        在当前窗口中选择一个框架
        """
        self.driver.switch_to.frame(self.driver.find_element(By.XPATH, target))

    def switch_to_parent_frame(self, desc, target, value):
        """
        切换到上级iframe
        """
        self.driver.switch_to.parent_frame()

    def select_window(self, desc, target, value):
        """
        使用窗口定位器选择一个弹出窗口。选择弹出窗口后，所有命令都将转到该窗口。窗口定位器使用句柄来选择窗口。
        """
        self.driver.switch_to_window(target)

    def send_keys(self, desc, target, value):
        """
        模拟指定元素上的击键事件，就像您逐键键入值一样。
        由于selenium 3.14版本，无法在密码输入框中输入数据，故修改为：复制与粘贴的方式来输入。
        """
        time.sleep(0.5)
        # ActionChains(self.driver).send_keys_to_element(self.driver.find_element(By.XPATH, target), value).perform()
        el = self.driver.find_element(By.XPATH, target)
        self.highlight_element(el)
        el.click()
        self.driver.switch_to.active_element.send_keys(value)
        # auto.SetClipboardText(text=value)
        # el.send_keys(Keys.CONTROL, 'V')

    def store(self, desc, target, value):
        """
        将目标字符串保存为变量以便于重复使用
        """
        print('stror:{}={}'.format(target, value))
        self.context.update({value: target})

    def loop_click_element(self, desc, target, value):
        """
        以1秒间隔进行循环点击各个元素列表下的每个元素 2023-12-4
        """
        # 不为空，且为数字
        print(f'参数value={value}')
        el_size = self.context.get(value, None)
        if el_size != None and str(el_size).isdecimal():
            for i in range(int(el_size)):
                target_child = f'{target}[{str(i+1)}]'
                print(f'target_child={target_child}')
                self.driver.find_element(By.XPATH, target_child).click()
                time.sleep(1)
        else:
            print(f'获取参数value的size={el_size}，其存在异常...')

    def store_text(self, desc, target, value):
        """
        获取元素的文本并存储以备后用
        """
        el = self.driver.find_element(By.XPATH, target)
        print('store_text:{}.text={}'.format(target, el.text))
        self.context.update({value: el.text})

    def store_title(self, desc, target, value):
        """
        获取当前页面的标题。
        """
        self.context.update({value: self.driver.title})

    def store_value(self, desc, target, value):
        """
        获取元素的值并存储以备后用。这适用于任何输入类型元素。
        """
        el = self.driver.find_element(By.XPATH, target)
        print(f'store_value:{target}.value={el.get_attribute("value")}')
        self.context.update({
            value: el.get_attribute('value')
        })

    def store_xpath_count(self, desc, target, value):
        """
        获取与指定 xpath 匹配的节点数
        """
        self.context.update({
            value: len(self.driver.find_elements(By.XPATH, target))
        })

    def add_cookie(self, desc, target, value):
        """
        添加cookie
        """
        self.driver.add_cookie({
            "name": target,
            "value": value
        })

    def submit(self, desc, target, value):
        """
        提交指定的表格。这对于没有提交按钮的表单特别有用，例如单输入“搜索”表单。
        """
        self.driver.find_element(By.XPATH, target).submit()

    def wait_for_element_not_visible(self, desc, target, value):
        """
        等待目标元素在页面上不可见。
        """
        ui.WebDriverWait(self.driver, int(value), 0.5).until(
            EC.invisibility_of_element_located((By.XPATH, target)), message=desc
        )

    def wait_for_element_present(self, desc, target, value):
        """
        等待目标元素出现在页面上。
        """
        ui.WebDriverWait(self.driver, int(value), 0.5).until(
            EC.presence_of_element_located((By.XPATH, target)), message=desc
        )

    def wait_for_element_visible(self, desc, target, value):
        """
        等待目标元素在页面上可见。
        """
        ui.WebDriverWait(self.driver, int(value), 0.5).until(
            EC.visibility_of_element_located((By.XPATH, target)), message=desc
        )
