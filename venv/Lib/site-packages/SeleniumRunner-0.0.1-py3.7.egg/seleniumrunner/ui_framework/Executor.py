
# 封装执行流程
from string import Template
from .UiCommand import SeleniumCommand
import allure
import pytest


class MyTemplate(Template):
    delimiter = "!"


@allure.feature('自动化测试执行功能入口')
def execute(caseinfo, driver):
    """
        UI调用-核心执行器
    """
    steps = caseinfo["steps"]
    context = caseinfo["context"]
    tmp_context = caseinfo['context'].get('case_name')
    allure.dynamic.story(tmp_context)
    uicommand = SeleniumCommand(driver, context)
    for step in steps:
        # 1. 针对step字典的每个参数，进行变量渲染
        refresh(step, context)
        print(step)
        if step.get('value') is not None:
            if step.get('command') == 'click' or step.get('command') == 'pause':
                if str(step.get('value')).isdecimal() or isFloat(step.get('value')):
                    step_v = str(step.get('desc')) + "：延时" + str(step.get('value')) + '秒'
                else:
                    step_v = str(step.get('desc')) + "：参数" + str(step.get('value')) + '错误！跳过延时操作。'
            else:
                step_v = str(step.get('desc'))+"：" + str(step.get('value'))
        else:
            step_v = str(step.get('desc'))
        with allure.step(step_v):
            # 2. 调用底层命令，执行具体操作
            uicommand.__getattribute__(step["command"])(
                desc=step.get("desc", None),
                target=step.get("target", None),
                value=step.get("value", None))


# 验证输入值是否为浮点数
def isFloat(value):
    try:
        float(value)
    except:
        isFloat = False
    else:
        isFloat = True
    return isFloat


def refresh(data, context):
    """
        变量渲染
    """
    if type(data) == dict:
        for key in data.keys():
            value = data.get(key)
            if value is None:
                continue
            if type(value) == str:
                value = MyTemplate(value).substitute(**context)
                data.update({key: value})
            else:
                for item in value:
                    refresh(item, context)
